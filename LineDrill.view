<<<<<<<=view-json=
{
  "id":"LineDrill",
  "name":"LineDrill",
  "category":"general",
  "default":{
    "jsonClass":"View",
    "elxType":"View",
    "vtype":"bundle",
    "state":"visible",
    "isContainer":false,
    "position":{
      "jsonClass":"Position",
      "elxType":"Position",
      "height":"500",
      "width":"800",
      "zIndex":"auto"
    },
    "data":{
      "jsonClass":"DataEmbedded",
      "datasource":{
        "jsonClass":"DataSource",
        "name":"initData",
        "stype":"Data",
        "desc":"default data",
        "schema":{
          "jsonClass":"Schema",
          "caseSensitive":false,
          "columns":[{
            "jsonClass":"SchemaColumn",
            "name":"cdd_name",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"cs_name",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"div_name",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"visited_date",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Year",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Month",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"hv_description",
            "dtype":"String",
            "attrs":[]
          }]
        },
        "data":{
          "jsonClass":"DataRecords",
          "records":[{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Aljunied GRC"
            },{
              "jsonClass":"Field",
              "value":"Bedok Reservoir-Punggol"
            },{
              "jsonClass":"Field",
              "value":"2014-11-22"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Visited"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Aljunied GRC"
            },{
              "jsonClass":"Field",
              "value":"Eunos"
            },{
              "jsonClass":"Field",
              "value":"2014-11-23"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Not Visited"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Aljunied GRC"
            },{
              "jsonClass":"Field",
              "value":"Kaki Bukit"
            },{
              "jsonClass":"Field",
              "value":"2014-11-24"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Wrong Address"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Aljunied GRC"
            },{
              "jsonClass":"Field",
              "value":"Paya Lebar"
            },{
              "jsonClass":"Field",
              "value":"2014-11-25"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Visited"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Aljunied GRC"
            },{
              "jsonClass":"Field",
              "value":"Serangoon"
            },{
              "jsonClass":"Field",
              "value":"2014-11-26"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Visited"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North East CDC"
            },{
              "jsonClass":"Field",
              "value":"Hougang SMC"
            },{
              "jsonClass":"Field",
              "value":"Hougang"
            },{
              "jsonClass":"Field",
              "value":"2014-11-27"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Wrong Address"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"North West CDC"
            },{
              "jsonClass":"Field",
              "value":"Nee Soon GRC"
            },{
              "jsonClass":"Field",
              "value":"Canberra"
            },{
              "jsonClass":"Field",
              "value":"2014-11-29"
            },{
              "jsonClass":"Field",
              "value":"2014"
            },{
              "jsonClass":"Field",
              "value":"11"
            },{
              "jsonClass":"Field",
              "value":"Visited"
            }]
          }]
        }
      },
      "directive":""
    },
    "typeinfo":{
      "jsonClass":"Bundle",
      "type":"LineDrill",
      "data":{
        "cdd_nameCol":"cdddata.cdd_name",
        "cs_nameCol":"cdddata.cs_name",
        "div_nameCol":"cdddata.div_name",
        "visited_dateCol":"cdddata.visited_date",
        "YearCol":"cdddata.Year",
        "MonthCol":"cdddata.Month",
        "hv_descriptionCol":"cdddata.hv_description"
      }
    }
  },
  "includes":["/elx/lib/d3.v3.js","/elx/lib/nv.d3.js","/elx/lib/tooltip.js","/elx/lib/utils.js","/elx/lib/legend.js","/elx/lib/line.js","/elx/lib/lineChart.js"],
  "edit-section":[{
    "id":"data",
    "name":"Data"
  },{
    "id":"view",
    "name":"View"
  },{
    "id":"actionbar",
    "name":"Actionbar"
  },{
    "id":"LineDrill",
    "name":"LineDrill"
  },{
    "id":"filters",
    "name":"Filters"
  }]
}
========
<<<<<<<=edit-json=
{
	"jsonClass":"ViewSection",
	"id":"LineDrill",
	"rows":[{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-height-label",
      "type":"label",
      "text":"Chart Height"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-chartHeight",
      "type":"field",
      "value":"${typeinfo.chartHight}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-width-label",
      "type":"label",
      "text":"Chart Width"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-chartWidth",
      "type":"field",
      "value":"${typeinfo.chartWidth}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-centre-label",
      "type":"label",
      "text":"Chart centre"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-chartCentre",
      "type":"field",
      "value":"${typeinfo.chartCentre}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-cdd_nameCol-label",
      "type":"label",
      "text":"cdd_name Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-cdd_nameCol",
      "type":"select-schema-column",
      "value":"${typeinfo.cdd_nameCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-div_nameCol-label",
      "type":"label",
      "text":"div_name Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-div_nameCol",
      "type":"select-schema-column",
      "value":"${typeinfo.div_nameCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-cs_nameCol-label",
      "type":"label",
      "text":"cs_name Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-cs_nameCol",
      "type":"select-schema-column",
      "value":"${typeinfo.cs_nameCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-YearCol-label",
      "type":"label",
      "text":"Year Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-YearCol",
      "type":"select-schema-column",
      "value":"${typeinfo.YearCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-MonthCol-label",
      "type":"label",
      "text":"Month Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-MonthCol",
      "type":"select-schema-column",
      "value":"${typeinfo.MonthCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-hv_descriptionCol-label",
      "type":"label",
      "text":"hv_description Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-hv_descriptionCol",
      "type":"select-schema-column",
      "value":"${typeinfo.hv_descriptionCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-visited_dateCol-label",
      "type":"label",
      "text":"visited_date Column"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-visited_dateCol",
      "type":"select-schema-column",
      "value":"${typeinfo.visited_dateCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-title-label",
      "type":"label",
      "text":"Title"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-title",
      "type":"field",
      "value":"${typeinfo.title}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-subtitle-label",
      "type":"label",
      "text":"Subtitle"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-subtitle",
      "type":"field",
      "value":"${typeinfo.subtitle}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-yaxisbar-label",
      "type":"label",
      "text":"Yaxis Bar name"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-yaxisbar",
      "type":"field",
      "value":"${typeinfo.yaxisbar}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-yaxisline-label",
      "type":"label",
      "text":"Yaxis Line name"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-yaxisline",
      "type":"field",
      "value":"${typeinfo.yaxisline}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-marginL-label",
      "type":"label",
      "text":"Left margin"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-marginL",
      "type":"field",
      "value":"${typeinfo.marginL}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-marginR-label",
      "type":"label",
      "text":"Right margin"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-marginR",
      "type":"field",
      "value":"${typeinfo.marginR}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-marginT-label",
      "type":"label",
      "text":"Top margin"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-marginT",
      "type":"field",
      "value":"${typeinfo.marginT}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-marginB-label",
      "type":"label",
      "text":"Bottom margin"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-marginB",
      "type":"field",
      "value":"${typeinfo.marginB}",
      "readonly":false
    }]
  }]
}
========
<<<<<<<=edit-js=
elx.bundle.type.column_basicTran = {

  	init : function(view) {
      
		$("#typeinfo-chartHeight").val(view.typeinfo.chart.height);
      	$("#typeinfo-chartWidth").val(view.typeinfo.chart.width);
      $("#typeinfo-chartCentre").val(view.typeinfo.chart.centre);
      $("#typeinfo-title").val(view.typeinfo.chart.text.title);
      $("#typeinfo-subtitle").val(view.typeinfo.chart.text.subtitle);
      $("#typeinfo-yaxisbar").val(view.typeinfo.chart.text.yaxisbar);
      $("#typeinfo-yaxisline").val(view.typeinfo.chart.text.yaxisline);
      
      	$("#typeinfo-marginR").val(view.typeinfo.chart.margin.r);
      	$("#typeinfo-marginL").val(view.typeinfo.chart.margin.l);
      	$("#typeinfo-marginT").val(view.typeinfo.chart.margin.t);
      	$("#typeinfo-marginB").val(view.typeinfo.chart.margin.b);
      
      
      $("#typeinfo-cdd_nameCol").val(view.typeinfo.data.cdd_nameCol);
      $("#typeinfo-cs_nameCol").val(view.typeinfo.data.cs_nameCol);
      $("#typeinfo-div_nameCol").val(view.typeinfo.data.div_nameCol);
      $("#typeinfo-visited_dateCol").val(view.typeinfo.data.visited_dateCol);
      $("#typeinfo-hv_descriptionCol").val(view.typeinfo.data.hv_descriptionCol);
      $("#typeinfo-YearCol").val(view.typeinfo.data.YearCol);
      $("#typeinfo-MonthCol").val(view.typeinfo.data.MonthCol)
	},

	validate : function(view) {
		return true;
	},

	save : function(view) {
		var cHeight = $("#typeinfo-chartHeight").val();
		view.typeinfo.chart.height = cHeight;
      	var cWidth = $("#typeinfo-chartWidth").val();
		view.typeinfo.chart.width = cWidth;
      var cCentre = $("#typeinfo-chartCentre").val();
		view.typeinfo.chart.centre = cCentre;
      
      
      var cdd_nameCol = $("#typeinfo-cdd_nameCol").val();
      	view.typeinfo.data.cdd_nameCol = cdd_nameCol;
      
      var cs_nameCol = $("#typeinfo-cs_nameCol").val();
      	view.typeinfo.data.cs_nameCol = cs_nameCol;
      
      var div_nameCol = $("#typeinfo-div_nameCol").val();
      	view.typeinfo.data.div_nameCol = div_nameCol;
      
      var visited_dateCol = $("#typeinfo-visited_dateCol").val();
      	view.typeinfo.data.visited_dateCol = visited_dateCol;
      
      var hv_descriptionCol = $("#typeinfo-hv_descriptionCol").val();
      	view.typeinfo.data.hv_descriptionCol = hv_descriptionCol;
      
      var YearCol = $("#typeinfo-YearCol").val();
      	view.typeinfo.data.YearCol = YearCol;
      
      var MonthCol = $("#typeinfo-MonthCol").val();
      	view.typeinfo.data.MonthCol = MonthCol;
           
      var cTitle = $("#typeinfo-title").val();
      	view.typeinfo.chart.text.title = cTitle;
      var cSubtitle = $("#typeinfo-subtitle").val();
      	view.typeinfo.chart.text.subtitle = cSubtitle;
       var cYaxisbar = $("#typeinfo-yaxisbar").val();
      	view.typeinfo.chart.text.yaxisbar = cYaxisbar;
       var cYaxisline = $("#typeinfo-yaxisline").val();
      	view.typeinfo.chart.text.yaxisline = cYaxisline;
      	var mLeft =$("#typeinfo-marginL").val();
    	view.typeinfo.chart.margin.l=mLeft;
      
      	var mRight = $("#typeinfo-marginR").val();
      	view.typeinfo.chart.margin.r=mRight;
      
      	var mBottom = $("#typeinfo-marginL").val();
      	view.typeinfo.chart.margin.l=mBottom;
      	var mTop = $("#typeinfo-marginT").val();
      	view.typeinfo.chart.margin.t=mTop;
    }
	
}
========
<<<<<<<=view-html=
<style>

body {
  overflow-y:scroll;
}

text {
  font: 12px sans-serif;
}

svg {
  display: block;
}
  
.chartWrap {
  margin: 0;
  padding: 0;
  overflow: hidden;
}


.nvtooltip {
  position: absolute;
  background-color: rgba(255,255,255,1.0);
  padding: 1px;
  border: 1px solid rgba(0,0,0,.2);
  z-index: 10000;

  font-family: Arial;
  font-size: 13px;
  text-align: left;
  pointer-events: none;

  white-space: nowrap;

  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/*Give tooltips that old fade in transition by
    putting a "with-transitions" class on the container div.
*/
.nvtooltip.with-transitions, .with-transitions .nvtooltip {
  transition: opacity 250ms linear;
  -moz-transition: opacity 250ms linear;
  -webkit-transition: opacity 250ms linear;

  transition-delay: 250ms;
  -moz-transition-delay: 250ms;
  -webkit-transition-delay: 250ms;
}

.nvtooltip.x-nvtooltip,
.nvtooltip.y-nvtooltip {
  padding: 8px;
}

.nvtooltip h3 {
  margin: 0;
  padding: 4px 14px;
  line-height: 18px;
  font-weight: normal;
  background-color: rgba(247,247,247,0.75);
  text-align: center;

  border-bottom: 1px solid #ebebeb;

  -webkit-border-radius: 5px 5px 0 0;
  -moz-border-radius: 5px 5px 0 0;
  border-radius: 5px 5px 0 0;
}

.nvtooltip p {
  margin: 0;
  padding: 5px 14px;
  text-align: center;
}

.nvtooltip span {
  display: inline-block;
  margin: 2px 0;
}

.nvtooltip table {
  margin: 6px;
  border-spacing:0;
}


.nvtooltip table td {
  padding: 2px 9px 2px 0;
  vertical-align: middle;
}

.nvtooltip table td.key {
  font-weight:normal;
}
.nvtooltip table td.value {
  text-align: right;
  font-weight: bold;
}

.nvtooltip table tr.highlight td {
  padding: 1px 9px 1px 0;
  border-bottom-style: solid;
  border-bottom-width: 1px;
  border-top-style: solid;
  border-top-width: 1px;
}

.nvtooltip table td.legend-color-guide div {
  width: 8px;
  height: 8px;
  vertical-align: middle;
}

.nvtooltip .footer {
  padding: 3px;
  text-align: center;
}


.nvtooltip-pending-removal {
  position: absolute;
  pointer-events: none;
}


/********************
 * SVG CSS
 */

svg {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  /* Trying to get SVG to act like a greedy block in all browsers */
  display: block;
  width:100%;
  height:100%;
}


svg text {
  font: normal 12px Arial;
}

svg .title {
 font: bold 14px Arial;
}

.nvd3 .nv-background {
  fill: white;
  fill-opacity: 0;
}

.nvd3.nv-noData {
  font-size: 18px;
  font-weight: bold;
}

/**********
*  Brush
*/

.nv-brush .extent {
  fill-opacity: .125;
  shape-rendering: crispEdges;
}

/**********
*  Legend
*/

.nvd3 .nv-legend .nv-series {
  cursor: pointer;
}

.nvd3 .nv-legend .disabled circle {
  fill-opacity: 0;
}

/**********
*  Axes
*/
.nvd3 .nv-axis {
  pointer-events:none;
}

.nvd3 .nv-axis path {
  fill: none;
  stroke: #000;
  stroke-opacity: .75;
  shape-rendering: crispEdges;
}

.nvd3 .nv-axis path.domain {
  stroke-opacity: .75;
}

.nvd3 .nv-axis.nv-x path.domain {
  stroke-opacity: 0;
}

.nvd3 .nv-axis line {
  fill: none;
  stroke: #e5e5e5;
  shape-rendering: crispEdges;
}

.nvd3 .nv-axis .zero line,
/*this selector may not be necessary*/ .nvd3 .nv-axis line.zero {
  stroke-opacity: .75;
}

.nvd3 .nv-axis .nv-axisMaxMin text {
  font-weight: bold;
}

.nvd3 .x  .nv-axis .nv-axisMaxMin text,
.nvd3 .x2 .nv-axis .nv-axisMaxMin text,
.nvd3 .x3 .nv-axis .nv-axisMaxMin text {
  text-anchor: middle
}

/**********
*  Brush
*/

.nv-brush .resize path {
  fill: #eee;
  stroke: #666;
}


/**********
* Lines
*/

.nvd3 .nv-groups path.nv-line {
  fill: none;
  stroke-width: 1.5px;
 
}

.nvd3 .nv-groups path.nv-line.nv-thin-line {
  stroke-width: 1px;
}


.nvd3 .nv-groups path.nv-area {
  stroke: none;

}

.nvd3 .nv-line.hover path {
  stroke-width: 6px;
}


.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point {
  fill-opacity: 0;
  stroke-opacity: 0;
}

.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point {
  fill-opacity: .5 !important;
  stroke-opacity: .5 !important;
}


.with-transitions .nvd3 .nv-groups .nv-point {
  transition: stroke-width 250ms linear, stroke-opacity 250ms linear;
  -moz-transition: stroke-width 250ms linear, stroke-opacity 250ms linear;
  -webkit-transition: stroke-width 250ms linear, stroke-opacity 250ms linear;

}

.nvd3.nv-scatter .nv-groups .nv-point.hover,
.nvd3 .nv-groups .nv-point.hover {
  stroke-width: 7px;
  fill-opacity: .95 !important;
  stroke-opacity: .95 !important;
}


.nvd3 .nv-point-paths path {
  stroke: #aaa;
  stroke-opacity: 0;
  fill: #eee;
  fill-opacity: 0;
}



.nvd3 .nv-indexLine {
  cursor: ew-resize;
}


/**********
* Distribution
*/

.nvd3 .nv-distribution {
  pointer-events: none;
}


/****
Interactive Layer
*/
.nvd3 .nv-interactiveGuideLine {
  pointer-events:none;
}
.nvd3 line.nv-guideline {
  stroke: #ccc;
}

</style>
  <div id="chartZoom">
    <a href="#" id="zoomIn">Zoom In</a> <a href="#" id="zoomOut">Zoom Out</a>
     <button id="title" style="height:15px;font-size:8px;font-weight:bold;font-align:center;">Back</button>
  </div>

  <div id="chart1" class='with-transitions'>       
    <svg style='height:500px;width:600px'></svg>
      
  </div>
<div id='${id}'></div>	
<div class='elx-script'>

 
 var div = $("#${id}");
 var view = elx.host.getViewById("${id}");
 var rawdata =${code};
  console.log('rawdataold', JSON.stringify(rawdata));
 var processeddata=[];
 var countlevel = 0;
 var levelonedata=[];
 var emptyArr=[];
 var values=[];
 var unixArr=[];
 var sample = {
 namespace : {}};
 sample.namespace.clickedItem = 
  {'North East CDC': 0,'North West CDC': 1,'South East CDC':2,'South West CDC':3,'Central CDC': 4,'Threshold':5};
 var obj = sample.namespace.clickedItem;

  var samplelevelone = {
 namespacelevelone : {}};
 samplelevelone.namespacelevelone.clickedItem = 
  {'NE1':0,'NE2':1,'NE3':2};
  
 var objlevelone = samplelevelone.namespacelevelone.clickedItem;

  
  rawdata.forEach(function(d) {
  console.log('cdd_nameCol',d[view.typeinfo.data.cdd_nameCol]);
  processeddata.push({
  
  "CDD" :d[view.typeinfo.data.cdd_nameCol],
  "Year" :d[view.typeinfo.data.YearCol],
  "Month":d[view.typeinfo.data.MonthCol],
  "GRC":d[view.typeinfo.data.cs_nameCol],
  "Division":d[view.typeinfo.data.div_nameCol],
  "VisitedDate" : d[view.typeinfo.data.visited_dateCol],
  "hv_description":d[view.typeinfo.data.hv_descriptionCol]
  
  
  });
  });  rawdata = processeddata;
  console.log('processeddata',JSON.stringify(processeddata));
 var visitedStatus = _.where(rawdata, {"hv_description": "Visited"});
   console.log('visitedStatus',JSON.stringify(visitedStatus));
 visitedStatus.forEach(function(d) {
 var dateinfo = d.VisitedDate;
  levelonedata.push({
  "CDD" :d.CDD,
  "GRC":d.GRC,
  "Division":d.Division,
  "VisitedDate" : ((new Date((dateinfo).toString()).getTime()/1000)).toString().concat('000')
  })
  });
  console.log('levelonedata',JSON.stringify(levelonedata));
  levelonedata.forEach(function(d) { unixArr.push(parseInt(d.VisitedDate))});
  var group = _.groupBy(levelonedata,function(d){return d["CDD"];});
  var count  = 1
    _.each(group,function(u,t){
  values.push([parseInt(_.pluck(u,'VisitedDate')),((count*100/levelonedata.length).toFixed(2))]);
  
var  key =(_.first(_.pluck(u,'CDD')));
  emptyArr.push( {key ,values });
  count = count +1 ;
  
  });
  

  draw(emptyArr,unixArr);
  function draw(emptyArr,unixArr){
  nv.addGraph(function() {
  var fitScreen = false;
  var chart = nv.models.lineChart()
        .forceY([0, 100])
        .forceX(unixArr[0],unixArr[length-1])
        .x(function(d) { return d[0] })
        .y(function(d) { return d[1] }) //adjusting, 100% is 1.00, not 100 as it is in the data
        .color(d3.scale.category10().range())
  
  .options({
  margin: {left: 50, bottom: 100},
    showXAxis: true,
    showYAxis: true,
    transitionDuration: 250
  })
  ;
  var zoom = 1;
  var dispatch = d3.dispatch('chartClick', 'elementClick');
  chart.useInteractiveGuideline(true);
 
  chart.xAxis
        .axisLabel("Date")
        .ticks(levelonedata.length)
        .tickValues(unixArr)
        .tickFormat(function(d) {
            return d3.time.format('%x')(new Date(d))
          });
  
  
  chart.yAxis.axisLabel("Count").tickFormat(d3.format(","));
 
  chart.xAxis.rotateLabels(-90);
  
  chart.dispatch = dispatch;
  var width = 600;
  var height = 450;
  d3.select('#chart1 svg')
      .attr('perserveAspectRatio', 'xMinYMid')
      .attr('width', width)
      .attr('height', height)
      .datum(emptyArr);

  setChartViewBox();
  resizeChart();
  
  nv.utils.windowResize(resizeChart);

  d3.select('#zoomIn').on('click', zoomIn);
  d3.select('#zoomOut').on('click', zoomOut);
   

  function setChartViewBox() {
    var w = width * zoom,
        h = height * zoom;

    chart
        .width(w)
        .height(h);

    d3.select('#chart1 svg')
        .attr('viewBox', '0 0 ' + w + ' ' + h)
      .transition().duration(500)
        .call(chart);
  }

  nv.utils.windowResize(chart.update);
 
  function zoomOut() {
    zoom += .25;
    setChartViewBox();
  }

  function zoomIn() {
    if (zoom <= .5) return;
    zoom -= .25;
    setChartViewBox();
  }

    function resizeChart() {
    var container = d3.select('#chart1');
    var svg = container.select('svg');
    
  if (fitScreen) {
      // resize based on container's width AND HEIGHT
      var windowSize = nv.utils.windowSize();
      svg.attr("width", windowSize.width);
      svg.attr("height", windowSize.height);
    } else {
      // resize based on container's width
      var aspect = chart.width() / chart.height();
      var targetWidth = parseInt(container.style('width'));
      svg.attr("width", targetWidth);
      svg.attr("height", Math.round(targetWidth / aspect));
    }
  };
  
  d3.select("#chart1 svg").selectAll(".nv-point").style("pointer-events", "all").on("click", function( e )
  { 
   d3.selectAll("svg > *").remove();
  
  
  
  
  
  
  if(countlevel == 0)
{
for(var key in obj) {
if(e.series==obj[key]){
console.log("you clicked :: " + key + " -- " + obj[key]);
countlevel+=1; 
var leveltwodata = _.where(levelonedata, {"CDD": key});
leveltwodata.forEach(function(d) { unixArr=[];unixArr.push(parseInt(d.VisitedDate))});
var group = _.groupBy(leveltwodata,function(d){return d["GRC"];});
  console.log('group*********',JSON.stringify(group));
  var count  = 1;
  emptyArr =[];values=[];
  _.each(group,function(u,t){
  
  values.push([parseInt(_.pluck(u,'VisitedDate')),parseInt((count*100/levelonedata.length).toFixed(2))]);
  var  key =(_.first(_.pluck(u,'GRC')));
  emptyArr.push( {key ,values });
  count = count +1 ;});}
  }}
else{

for(var key in objlevelone) {
   if(e.series==objlevelone[key])
   {console.log("you clicked :: " + key + " -- " + objlevelone[key]);
   
   
      var levelthreedata = _.where(levelonedata, {"GRC": String(key)});
  levelthreedata.forEach(function(d) { unixArr=[];unixArr.push(parseInt(d.VisitedDate))});
  console.log('levelthreedata*********',JSON.stringify(levelthreedata));
      emptyArr=[];
      values=[];
  
  var count  = 1;
       _.each(levelthreedata,function(d){
  
  values.push([parseInt (d.VisitedDate),parseInt((count*100/levelonedata.length).toFixed(2))]);
  
var  key =(d.Division);
 
  emptyArr.push( {key ,values });
  count = count +1 ;});
   
   }
  }
}
 
  console.log('emptyArr*********',JSON.stringify(emptyArr));
  console.log('unixArr*********',JSON.stringify(unixArr));
   draw(emptyArr,unixArr);
  });
return chart;})}; 
  
$("#title").click(function(){
  countlevel =0;
  draw(emptyArr,unixArr);
}); 
  

</div>
========