<<<<<<<=view-json=
{
   "id":"LineDrill",
   "name":"LineDrill",
   "category":"Chart",
   "default":{
      "jsonClass":"View",
      "elxType":"View",
      "vtype":"bundle",
      "state":"visible",
      "isContainer":false,
      "position":{
         "jsonClass":"Position",
         "elxType":"Position",
         "height":"600",
         "width":"800",
         "zIndex":"auto"
      },
      "data":{
         "jsonClass":"DataEmbedded",
         "datasource":{
            "jsonClass":"DataSource",
            "name":"initData",
            "stype":"Data",
            "desc":"default data",
            "schema":{
               "jsonClass":"Schema",
               "caseSensitive":false,
               "columns":[
                  {
                     "jsonClass":"SchemaColumn",
                     "name":"FYEAR",
                     "dtype":"String",
                     "attrs":[

                     ]
                  },
                  {
                     "jsonClass":"SchemaColumn",
                     "name":"Gross Profit",
                     "dtype":"Double",
                     "attrs":[

                     ]
                  },
                  {
                     "jsonClass":"SchemaColumn",
                     "name":"Sales ($)",
                     "dtype":"Double",
                     "attrs":[

                     ]
                  }
               ]
            },
            "data":{
               "jsonClass":"DataRecords",
               "records":[
                  {
                     "jsonClass":"Record",
                     "fields":[
                        {
                           "jsonClass":"Field",
                           "value":"2014-11-22"
                        },
                        {
                           "jsonClass":"Field",
                           "value":800
                        },
                        {
                           "jsonClass":"Field",
                           "value":700
                        }
                     ]
                  }
               ]
            }
         },
		  "hint":"directive-data-array",
         "directive":"ZnVuY3Rpb24gZGF0YSgpew0KDQogIHZhciBmWWVhcj12aWV3LnR5cGVpbmZvLmRhdGEuZmllbGRzLmZZZWFyOw0KIA0KICB2YXIgdD12aWV3LnR5cGVpbmZvLmRhdGEuZmllbGRzLm9wZXJhYmxlLnZhbHVlczsgDQogIA0KICB2YXIgY29sdW1ucz1bXTsgdmFyIG9wZXJhdGlvbnM9W107IHZhciBrZXlzPVtdOw0KIA0KCWZZZWFyLmZvckVhY2goZnVuY3Rpb24oZCxpKSB7DQogIGtleXMucHVzaChkLm5hbWUpOw0KICAgICB9KQ0KDQoNCiAgICB0LmZvckVhY2goZnVuY3Rpb24oZCxpKSB7DQogIGNvbHVtbnMucHVzaChkLm5hbWUpOw0KICAgIG9wZXJhdGlvbnMucHVzaChkLm9wKTsNCiAgfSkNCiANCiAgICAgcmV0dXJuIHJvd3MuZ3JvdXBCeShrZXlzLGNvbHVtbnMsb3BlcmF0aW9ucyk7DQp9DQpkYXRhKCk7="
      },
      "typeinfo":{
         "jsonClass":"Bundle",
         "type":"LineDrill",
         "data":{
            "series":{
               "sort":"series-asc"
            },
            "keys":{
               "sort":"key-asc"
            },
            "fields":{
               "fYear":[
                  {
                     "name":"FYEAR",
                     "id":"|"
                  }
               ],
            
               "operable":{
                  "values":[
                     {
                        "id":"Gross P2",
                        "name":"Gross Profit",
                        "op":"sum"
                     },
                     {
                        "id":"Sales ($)",
                        "name":"Sales ($)",
                        "op":"sum"
                     }
                  ]
               }
            }
         },
        "frameWidth":"800",
        "frameHeight":"600",
        "groupByDateStr":"%d-%m-%Y",
        "xAxisLabel":"xAxis",
        "yAxisLabel":"yAxis",
        "xTicksFormatCast":"xTicksFormat=function(d){return d3.time.format('%x')(d);}",
        "yTicksFormatCast":"yTicksFormat=function(d){return d3.round(d,2);}"

      }
   },
   "includes":[
      "/elx/lib/d3.v3.js",
      "/elx/lib/nv.d3edit.js"
   ],
   "edit-section":[{
        "id":"view",
        "name":"View"
      },
      {
         "id":"data",
         "name":"Data"
      },
      
      {
         "id":"LineDrill",
         "name":"LineDrill"
      },
      {
         "id":"filters",
         "name":"Filters"
      }
   ]
}
========
<<<<<<<=edit-json=
{
	"jsonClass":"ViewSection",
	"id":"LineDrill",
	"rows":[{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-frameHeight-label",
      "type":"label",
      "text":"Chart Height"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-frameHeight",
      "type":"field",
      "value":"${typeinfo.frameHeight}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-frameWidth-label",
      "type":"label",
      "text":"Chart Width"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-frameWidth",
      "type":"field",
      "value":"${typeinfo.frameWidth}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-fYearCol-label",
      "type":"label",
      "text":"Date"
    },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-fYearCol",
      "type":"select-schema-column",
      "value":"${typeinfo.fYearCol}"
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-groupByDateStr-label",
      "type":"label",
      "text":"d3 time format parse String"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-groupByDateStr",
      "type":"field",
      "value":"${typeinfo.groupByDateStr}",
      "readonly":false
    }]
  },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-data-fields-operable-values-label",
        "type":"label",
        "text":"Column"
      },{
        "jsonClass":"Div",
        "id":"typeinfo-data-fields-operable-values"
      }]
    },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-xAxisLabel-label",
      "type":"label",
      "text":"X Axis Label"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-xAxisLabel",
      "type":"field",
      "value":"${typeinfo.xAxisLabel}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-yAxisLabel-label",
      "type":"label",
      "text":"Y Axis Label"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-yAxisLabel",
      "type":"field",
      "value":"${typeinfo.yAxisLabel}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-xTicksFormatCast-label",
      "type":"label",
      "text":"Format X Ticks"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-xTicksFormatCast",
      "type":"field",
      "value":"${typeinfo.xTicksFormatCast}",
      "readonly":false
    }]
  },{
    "jsonClass":"Row",
    "cols":[{
      "jsonClass":"Label",
      "id":"typeinfo-yTicksFormatCast-label",
      "type":"label",
      "text":"Format Y Ticks"
    },{
      "jsonClass":"Field",
      "id":"typeinfo-yTicksFormatCast",
      "type":"field",
      "value":"${typeinfo.yTicksFormatCast}",
      "readonly":false
    }]
  }]
}
========
<<<<<<<=edit-js=
elx.bundle.type.LineDrill = {

  	init : function(view) {
       var dataOps =  elx.utils.getElxChartOperablesData(view, view.typeinfo.data.fields.operable.values);
   		var tableOp = new elx.MultiChartValueColumnSection("typeinfo-data-fields-operable-values-table",
                                                        "typeinfo-data-fields-operable-values", view, dataOps);
		$("#typeinfo-data-fields-operable-values-table").data("table",tableOp);
      elx.host.utils.initSectionGroups(view,$("#LineDrill-div"));
        $("#typeinfo-fYearCol").val(view.typeinfo.data.fields.fYear[0].name);
    
	
	},

	validate : function(view) {
		return true;
	},

	save : function(view) {
		var dataTableOp = $("#typeinfo-data-fields-operable-values-table").data("table");
       var dataOp = dataTableOp.table.getData();
          view.typeinfo.data.fields.operable.values = 
          elx.utils.buildElxChartOperablesData(view.typeinfo.data.fields.operable.values,dataOp);
      	elx.host.utils.saveProperties(view.typeinfo);
   	var dfYear = $("#typeinfo-fYearCol").val();
		view.typeinfo.data.fields.fYear[0].name = dfYear;
 
         
    }
	
}
========
<<<<<<<=view-html=
<style>
text{font:12px sans-serif}svg{display:block}.chartWrap{margin:0;padding:0;overflow:hidden}.nvtooltip{position:absolute;background-color:rgba(255,255,255,1.0);padding:1px;border:1px solid rgba(0,0,0,.2);z-index:10000;font-family:Arial;font-size:13px;text-align:left;pointer-events:none;white-space:nowrap;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity 250ms linear;-moz-transition:opacity 250ms linear;-webkit-transition:opacity 250ms linear;transition-delay:250ms;-moz-transition-delay:250ms;-webkit-transition-delay:250ms}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{margin:0;padding:4px 14px;line-height:18px;font-weight:400;background-color:rgba(247,247,247,0.75);text-align:center;border-bottom:1px solid #ebebeb;-webkit-border-radius:5px 5px 0 0;-moz-border-radius:5px 5px 0 0;border-radius:5px 5px 0 0}.nvtooltip p{margin:0;padding:5px 14px;text-align:center}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key{font-weight:400}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{width:8px;height:8px;vertical-align:middle}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{position:absolute;pointer-events:none}svg{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;width:100%;height:100%}svg text{font:normal 12px Arial}svg .title{font:bold 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125;shape-rendering:crispEdges}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .disabled circle{fill-opacity:0}.nvd3 .nv-axis{pointer-events:none}.nvd3 .nv-axis path{fill:none;stroke:#000;stroke-opacity:.75;shape-rendering:crispEdges}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis line{fill:none;stroke:#e5e5e5;shape-rendering:crispEdges}.nvd3 .nv-axis .zero line,/*this selector may not be necessary*/ .nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x .nv-axis .nv-axisMaxMin text,.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-groups path.nv-line{fill:none;stroke-width:1.5px}.nvd3 .nv-groups path.nv-line.nv-thin-line{stroke-width:1px}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3 .nv-line.hover path{stroke-width:6px}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-moz-transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-webkit-transition:stroke-width 250ms linear,stroke-opacity 250ms linear}.nvd3.nv-scatter .nv-groups .nv-point.hover,.nvd3 .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}.nvd3 .nv-distribution{pointer-events:none}.nvd3 .nv-interactiveGuideLine{pointer-events:none}.nvd3 line.nv-guideline{stroke:#ccc}

</style>


<div id="chart_${id}" class='with-transitions'>       
    <svg ></svg>
      
  </div>

<div class='elx-script'>

 var viewId=view.id;
var div = $("#"+viewId);
  var xTicksFormat,yTicksFormat;
  eval(view.typeinfo.xTicksFormatCast);
  eval(view.typeinfo.yTicksFormatCast);
  var options={xAxisLabel:view.typeinfo.xAxisLabel,yAxisLabel:view.typeinfo.yAxisLabel,
  xTicksFormat:xTicksFormat,yTicksFormat:yTicksFormat,frameHeight:view.typeinfo.frameHeight,frameWidth:view.typeinfo.frameWidth};
  var groupByDateStr=view.typeinfo.groupByDateStr;
  
  console.log('options',JSON.stringify(options));
   if (view.data.jsonClass === "DataEmbedded"){
  var rawData=[  
  ["2014-11-22",25,35],
  ["2014-11-23",35,70],
  ["2014-11-24",70,100],
  ["2014-11-25",96,100],
  ["2014-11-26",20,100],
  ["2014-11-27",14,100],
  ["2014-11-29",60,100], 
  
];
  } else rawData=${data};
 
  var chartGen,minMaxDateFn,forChartFn,getArr,hexToModel1,arrToHex,cutTableName;
  debugFn();
  var f=view.typeinfo.data.fields;
   var data1=arrToHex(rawData,f,view);
    var legendKey='allGroupby';
  var data2noNeedValueOp=hexToModel1(data1,legendKey,'noNeedValueOp');
  console.log('data2noNeedValueOp:',JSON.stringify(data2noNeedValueOp));
  
  var parseDateStr="%Y-%m-%d";
  
  var processDateData=_.map(data2noNeedValueOp,function(d){
  return {'series':d.RATIOTYPE, 'date':d3.time.format(parseDateStr).parse(d.FYEAR),'value':d.RATIOVALUE};
  });
  var groupByDateStr="%d-%m-%Y";
  var forChartData=forChartFn(processDateData,groupByDateStr);
 console.log('forChartData', JSON.stringify(forChartData));
var minMaxDateArr=minMaxDateFn(processDateData);
console.log("minMaxDateArr",minMaxDateArr);
  var chart={};
  chartGen(forChartData,viewId,minMaxDateArr,options); 
  console.log("chart:",chart);

  console.log("done trying");
  function debugFn(){
  arrToHex=function(data,f,view){
  
    var nameArr = getArr(f, 'name', view);
    console.log("nameArr", nameArr);
    var idArr = getArr(f, 'id', view);
    console.log("idArr:", JSON.stringify(idArr));
    var processedIdArr = [];
    _.each(idArr, function(d, i) {
        if (_.str.include(d,"#{") == true || _.str.include(d,"|") == true) {
            processedIdArr.push(d);
        } else
            processedIdArr.push("#[" + d + "]");
    });
    var combineArr = [];
    processedIdArr.forEach(function(d, i) {

        if (i === 0) {
            var obj = 'FYEAR' + d;
        } else if (i > 0) var obj = nameArr[i] + d;
        combineArr.push(obj);
    })
    var globalArr = [];
    data.forEach(function(d, i) {
        var localObj = _.object(combineArr, d);
        globalArr.push(localObj);
    })
    return globalArr;

  };
  hexToModel1=function(data,legendKey,valueOpBool){
   var ReadArray, columnNameArray, model_keyArray, objKey,keyArray;
    ReadArray = [];
    objKey = Object.keys(data[0]);
	console.log("before objKey",objKey);
    model_keyArray = [];
    columnNameArray = [];
	keyArray=[];
    objKey.forEach(function(key) {
        var columnNameObj, model_keyObj;
 		if (valueOpBool=='needValueOp') {
			if (_.str.include(key,"?id")==true  ) {
			keyArray.push(key);
			}
		} else {
		if (_.str.include(key,"?id")==false && (_.str.include(key,"|")==false)) {
			keyArray.push(key);
			}
		
		}
     
    });
 
	console.log("inside keyArray",JSON.stringify(keyArray));
    data.forEach(function(d, i) {
        var Category, ColumnName, GroupNameArr, Model, ReadObj, Value, lastGroupby, propertyName;
        ReadObj = {};
        Value = void 0;
        ColumnName = void 0;
        Category = void 0;
        Model = void 0;
        lastGroupby = void 0;
        GroupNameArr = [];
        for (propertyName in d) {
            if (_.str.include(propertyName,"xaxis") === true) {
                Category = d[propertyName];
            }
            if (_.str.include(propertyName,"groupby") === true) {
                lastGroupby = d[propertyName];
                GroupNameArr.push(lastGroupby);
            }
        }
        keyArray.forEach(function(modelKey) {
            var allGroupby, cName, lastGroupby_op, model_keyObj, model_keyObjArr, model_yAxisObj, objPush;
            for (propertyName in d) {
                if (_.str.include(propertyName,modelKey) === true) {
                    model_keyObj = propertyName.replace(/.*\[|\]/g, "");
                    model_keyObjArr = model_keyObj.split(".");
                    objPush = {
                        FYEAR: d['FYEAR|'],
                        RATIOTYPE: model_keyObjArr[0],
                        COYNAME: d['COYNAME|'],
                        RATIOVALUE: d[propertyName]
                       
                    };
                    GroupNameArr.forEach(function(d, i) {
                        propertyName = "groupby" + (i + 1);
                        objPush[propertyName] = d;
                    });
                    if (legendKey === "lastGroupby_op") {
                        lastGroupby_op = lastGroupby + "_" + cName;
                        //    objPush["legendKey"] = lastGroupby_op;
                        ReadArray.push(objPush);
                    } else if (legendKey === "allGroupby") {
                        allGroupby = GroupNameArr.join("_");
                        //   objPush["legendKey"] = allGroupby;
                        ReadArray.push(objPush);
                    } else if (legendKey == "op(ColumnName)") {
                        //				 objPush["legendKey"]=cName;
                        ReadArray.push(objPush);
                    } else if (legendKey == "ColumnName") {
                        var regExp = /\(([^)]+)\)/;
                        var matches = regExp.exec(cName);
                         //	 objPush["legendKey"]=matches[1];
                        ReadArray.push(objPush);
                    }
                }
            }
        });
    });
    return ReadArray;
  };
  getArr =function(obj, k, view) { //used on view.typeinfo to get an array of property value of the propertyName 'name'
     var objects = [];
     for (var i in obj) {
         if (!obj.hasOwnProperty(i)) continue;
         if (typeof obj[i] == 'object') {
             objects = objects.concat(getArr(obj[i], k, view));
         } else if (_.str.include(i,k) == true) {
		
             if (k == "name") {
                 objects.push(cutTableName(obj[i], view));
             } else
                 objects.push(obj[i]);
         }
     }
	
     return objects;
 };
  cutTableName=function(stringText, view) {

    var uniTable = (view.data.jsonClass === "DataAdhocTable") ? view.data.fields[0].table + "." : null;
    var colm = (uniTable == null) ? stringText : stringText.split(uniTable)[1];
    return colm;
};
  forChartFn=function(processDateData,groupByDateStr){
  var aggreData=[];
  var seriesDateNest=d3.nest()
			.key(function(m){
			return m['series']+'_'+d3.time.format(groupByDateStr)(m['date']);})
			.rollup(function(n){
			var sampleObj=_.clone(n[0]);
			var sumValue=d3.sum(n, function(g) {return g.value; });
			sampleObj['value']=sumValue;
			aggreData.push(sampleObj);
			}).entries(processDateData);
var forChartData=[];
var seriesNest=d3.nest()
				.key(function(m){
				return m['series'];})
				.rollup(function(n){
				var obj={key:n[0]['series'],values:[]};
					var dateArr=_.pluck(n,'date');
				dateArr=_.map(dateArr,function(u){
				return u.getTime();
				});
				var valueArr=_.pluck(n,'value');
				_.each(dateArr,function(d,i){
				obj.values.push([d,valueArr[i]]);
				});
			
				forChartData.push(obj);
				}).entries(aggreData);
				return forChartData;
  };
   minMaxDateFn=function(processDateData){
   var unixArr=_.pluck(processDateData,'date');
   unixArr=_.map(unixArr,function(d){
   return d.getTime();});
   
   var minMaxDateArr=[new Date(_.min(unixArr)),new Date(_.max(unixArr))];
   return minMaxDateArr;
   };
   xTickFn=function(minMaxDateArr) {
   
   };
   chartGen=function(data,viewId,minMaxDateArr,options){
  d3.select('#chart_'+viewId +' svg').style({"height":options.frameHeight+'px',"width":options.frameWidth+'px'});
 nv.addGraph(function() {
  
  chart = nv.models
  .lineWithFocusChart()
  //  .linePlusBarChartWithFocus()
   .margin({top: 30, right: 60, bottom: 50, left: 70})
    .x(function(d) { return d[0] })
    //adjusting, 100% is 1.00, not 100 as it is in the data
    .y(function(d) { return d[1] })
    .color(d3.scale.category10().range())
    ;
chart.height(options.frameHeight-90)
  .width(options.frameWidth);
  chart.xAxis
   .axisLabel(options.xAxisLabel)
    .tickFormat(function(d) {
      return options.xTicksFormat(new Date(d));
    });
  chart.x2Axis
  .axisLabel(options.xAxisLabel)
    .tickFormat(function(d) {
      return options.xTicksFormat(new Date(d));
    });

  chart.yAxis
   .axisLabel(options.yAxisLabel)
  .tickFormat(function(d) {
  return options.yTicksFormat(d);});

   chart.y2Axis
   .axisLabel(options.yAxisLabel)
  .tickFormat(function(d) {
   return options.yTicksFormat(d);});
 
    d3.select('#chart_'+viewId +' svg')
      .datum(data)
      .transition().duration(500)
      .call(chart)
      ;
 console.log("d3.select",d3.select('#chart_'+viewId));
  //  nv.utils.windowResize(chart.update);
  elx.host.setupAutoResize($('#'+viewId), function(w,h){
  console.log("trying");
  	if(w != parseInt(options.frameWidth) || h != parseInt(options.frameHeight)){
  console.log("autoResized, h:",h);
  
	chart.height(h-80);
 	 chart.width(w);
  chart.update();
  		}
    });
  
    return chart;
});



};

}


</div>
========